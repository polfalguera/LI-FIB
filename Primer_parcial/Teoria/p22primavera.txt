
--------------------------------------------------------------------------------------------------
Logic in Computer Science, April 1st, 2022. Time: 1h30min. No books or lecture notes allowed.
--------------------------------------------------------------------------------------------------
-Insert your answers on the dotted lines ... below, and only there.
-Do NOT modify the problems or the @nota lines.
-When finished, upload this file with the same name: exam.txt
-Use the text symbols:     &     v    -       ->          |=        A       E
   for                    AND   OR   NOT   IMPLIES   "SATISFIES"  FORALL  EXISTS  etc.,  like in:
   I  |=  p & (q v -r)     (the interpretation I satisfies the formula p & (q v -r)  ).
   You can write subindices using "_". For example write x_i to denote x-sub-i.
--------------------------------------------------------------------------------------------------


Problem 1. (4 points).                                   @n@nota1:


1a)
Let F and G be propositional formulas such that G |= F.  Is it true that then always  F |= G  or  F |= -G ?
Prove it as simply as you can using only the definitions of propositional logic.

If F is a logical consequence of G, then G or -G is a logical consequence of F. 

G |= F => F |= G v F |= -G

It is false. We give a conter-exmaple.

Let F be the formula p v -p and let G be the formula p.
	1. G |= F, since the only model of G is when I(p) = 1 and thus I |= F (in fact, F is a tautology).
	2. F not|= G, since there is a model I of F, the interpretation I(p) = 0, such that F is true but G is not, i.e. I not|= G
	3. F not|= -G, since -G is -p and there is a model I of F, the interpretation I(p) = 1, such that F is true but -G is not, i.e. I not|= -G.

1b)
Let F and G be propositional formulas.
Is it true that F |= G iff F & -G  is unsatisfiable?
Prove it using only the definitions of propositional logic.

F |= G						iff [by definition of logical consequence]
All models of F are models of G		iff [by definition of model]
AI, I |= F -> I |= G				iff [by definition of ->]
AI, I not|= F or I |= G				iff [by definition of satisfaction]
AI, eval_I(F) = 0 or eval_I(G) = 1		iff [by definition of -]
AI, eval_I(F) = 0 or 1 - eval_I(G) = 0	iff [by definition of eval]
AI, eval_I(F) = 0 or eval_I(-G) = 0		iff [by definition of min]
AI, min(eval_I(F),eval_I(-G)) = 0		iff [by definition of eval]
AI, eval_I(F & -G) = 0				iff [by definition of eval_I(&)]
AI, I not|= (F & -G)				iff [by definition of satisfaction]
F and -G has no models				iff [by definition of model]
F and -G is unsatisfiable			iff [by definition of satisfiable]

--------------------------------------------------------------------------------------------------

Problem 2. (3 points).                                   @n@nota2:


2a) Explain in a few words why propositional SAT is in NP.

Propositional SAT is a problem such that, given an propositional formula F as an input, question if it is satisfiable must be answered.
It is NP because if the answer is YES, there is a polynomiual-size certificate of this fact, a model I that satisfies F, and we can
check whether I |= F in polynomial time.

2b) Explain in a few words why 3-SAT is NP-complete. You may assume that SAT is NP-hard.

Answer: For 3-SAt to be NP-complete, we need:
	1. To be NP. It is, as said in section a).
	2. To be NP-hard. It is, since we can use a Tseitin transformation to reduce SAT to 3-SAT: transform any formula F into
				an equisatisfiable 3-SAT formula.


2c) Let F be an UNsatisfiable propositional formula built over n different predicate symbols.
Give the name of some method to express a proof (or certificate) of unsatisfiability (like a model is a 
certificate of satisfiability).
Do you think that every unsatisfiable F has such an unsatisfiability proof of size polynomial in n? (Don't know)

Method: Using resolution proof. Given a formula F, we compute the clausure under resolution of F, being this
one Res(F), and if the empty clause belongs to Res(F), then we can assure F is unsatisfiable.


--------------------------------------------------------------------------------------------------

Problem 3. (2 points).                                   @n@nota3:
Here just give the answer, giving no explanations. Use a^b to denote "a to the power b".


3a)
How many Boolean functions with n input bits f: {0,1}^n --> {0,1} are there in terms of n?

Answer: 2^(2^n).


3b)
Any propositional formula represents a Boolean function.
List the names of the other methods you know to represent Boolean functions.

Answer: Boolean circuits, truth tables, BDDs,...


3c)
Is it true that two formulas F and G are logically equivalent if they represent the same Boolean function?

Yes. Let F be an arbitrary formula. F represents a boolean function iff for every input of bits of the boolean
function that return 1 are a model of F.

That means, that if two formulas F and G represent the same boolean function, it means they will have the same
models and thus will be logically equivalent.

--------------------------------------------------------------------------------------------------

Problem 4. (1 point ).                                   @n@nota4:

4) The published Sudoku puzzles usually are designed in such a way that exactly one solution exists.
Explain *very* briefly how you would use a SAT solver to check that a given Sudoku has exactly one solution.

Answer:
	1. Call the SAT solver with the input S, the set of clauses for the given Sudoku.
	2. If unsatisfiable, then return NO.
	3. If satisfiable with model I, where I(x_1)=0,...,I(x_n)=0 and I(y_1)=1,...,I(y_m)=1,
		- add to S the clause x_1 v ... v x_n v -y_1 v ... v -y_m that forbids I, and call the solver again.
		- so now, if S satisfiable retur NO, else return YES.


--------------------------------------------------------------------------------------------------




