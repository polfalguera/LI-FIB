--------------------------------------------------------------------------------------------------
Logic in Computer Science, June 14th, 2022. Time: 2h30min. No books or lecture notes allowed.
--------------------------------------------------------------------------------------------------
Note on evaluation: eval(propositional logic) = max(eval(Problems 1,2,3), eval(partial exam))
                    eval(first-order logic)   = eval(Problems 4,5,6).

-Insert your answers on the dotted lines ... below, and only there.
-Do NOT modify the problems or the @nota lines or the @answer lines
-When finished, upload this file with the same name: exam.txt
-Use the text symbols:     &     v    -       ->          |=        A       E
   for                    AND   OR   NOT   IMPLIES   "SATISFIES"  FORALL  EXISTS,  like in:
   I  |=  p & (q v -r)     (the interpretation I satisfies the formula p & (q v -r)  ).
   You can write subindices using "_". For example write x_i to denote x-sub-i.
--------------------------------------------------------------------------------------------------
_____________________________________________________________________________________

FIRST-ORDER LOGIC.
_____________________________________________________________________________________


Problem 4. (4 points).                                   @n@nota3:


4a)
Let f be a binary function symbol. Consider the two first-order interpretations I1 and I2:
   D_I1 = N (the natural numbers)    f_I1(n,m) = n*m
   D_I2 = Z (the integers)           f_I2(n,m) = n*m
Write a formula F in first-order with equality (FOLE), with NO other function or predicate symbols than f and equality,
such that F distinguishes I1 and I2, that is, such that F is true in one of I1 or I2 and false in the other.
Give NO explanations.
Hint: express "for every non-zero x there is another number y with the same square". But express "non-zero" using only f!

MY ANSWER:

An ( -eq( f(n,n), n ) -> Em ( eq( f(n,n) , f(m,m) ) ) )

THEIR ANSWER:

Ax (    Ez f(x,z)!=x   -->  Ey  ( x!=y  &  f(x,x)=f(y,y) )    )



4b) Answer the same question, but now:
   D_I1 = Q (the rational numbers)    f_I1(n,m) = n*m
   D_I2 = R (the real     numbers)    f_I2(n,m) = n*m


Answer:
   Ax Ey  f(f(y,y),f(y,y)) = f(x,x)    ("every square has a fourth root"; false in Q, true in R).
Or:
   AxAy (   ( f(x,x)=f(y,y) &  x!=y ) --> Ez ( f(z,z)=x v f(z,z)=y ) )
     ("if two different numbers x and y have the same square, then at least one of them has a
       square root"; also false in Q, true in R).

------------------------------------------------------------------------------------

Problem 5. (2 points).                                   @n@nota5:

5a) Is the following formula satisfiable? Answer YES or NO and prove it.

   Ax -p(x,x)   &   AxAyAz( p(x,y)&p(y,z) -> p(x,z) )    &    AxEy p(x,y)   &    ExAy -p(y,x)


Answer:
Yes, it is satisfiable. Here is the model I obtained:
	- Domain_I = {Natura numbers}
	- p_I(x,y) = x lower than y


------------------------------------------------------------------------------------
Problem 6. (4 points).                                   @n@nota6:
Formalize and prove by resolution that sentence F is a logical consequence of the first five.
   A. If someone uses a gun he can kill anyone else.
   B. Pete is John's son.
   C. If someone has something, then he/she uses it.
   D. John has a gun.
   E. If a father has something, then his sons also have it.
   F. Pete can kill John.

Use constant symbols Gun, John and Pete, and predicate symbols:
   has(x,y) meaning "x has y"
   uses(x,y) meaning "x uses y"
   son(x,y) meaning "x is the son of y"
   canKill(x,y) meaning "x can kill y".

Answer:
First of all, we formalize the sentences:

a. Ax Ay ( uses(x,Gun) -> canKill(x,y) )
b. son(Pete,John)
c. Ax Ay ( ( has(x,y) ) -> uses(x,y) )
d. has(John,Gun)
e. Ax Ay Az ( ( has(x,y) & son(z,x) ) -> has(z,y) )
f. canKill(Pete,John)

We want to demonstrate:
a & b & c & d & e |= f				IFF
a & b & c & d & e -> f				IFF
a & b & c & d & e & -f INSAT			IFF
S = clausalForm(a & b & c & d & e & -f) INSAT	IFF
[] belongs to ResFact(S)

Let's get the clausal form from the fromalized sentences:

(a) -uses(x,Gun) v canKill(x,y)

(b) son(Pete,John)

(c) -has(x,y) v uses(x,y)

(d) has(John,Gun)

(e) -has(x,y) v -son(z,x) v has(z,y)

(f) -canKill(Pete,John)

Let's start doing ResFact(S):

					WITH:			MGU:
1. -uses(Pete,Gun)			(a) with (f)		{x=Pete,y=John}
2. -has(John,y) v has(Pete,y)		(b) with (e)		{x=John,z=Pete}
3. -has(Pete,Gun)			(c) with 1.		{x=Pete,y=Gun}
4. has(Pete,Gun)			(d) with 2.		{y=Gun}
5. []					3.  with 4.		{}

That's it, [] belongs to ResFact(S).

-----------------------------------------------------------------------

